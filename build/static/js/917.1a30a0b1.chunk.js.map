{"version":3,"file":"static/js/917.1a30a0b1.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/quoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__FHj+f\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__Iu5BO\",\"loading\":\"NewCommentForm_loading__N3BCg\",\"control\":\"NewCommentForm_control__CsPx6\",\"actions\":\"NewCommentForm_actions__aHQZ4\"};","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__waw29\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__L9JBw\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const onAddedComment = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments Found</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteId} onAddedComment={onAddedComment} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__4EjI8\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst DummyQuotes = [\r\n  { id: \"q1\", author: \"Ahmed\", text: \"Learning React is fun!\" },\r\n  { id: \"q2\", author: \"Maklad\", text: \"Learning React is great!\" },\r\n];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  const { quoteId } = params;\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n  if (!loadedQuote.text) {\r\n    return <p>No Quote Found</p>;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","useCallback","length","onClick","author","params","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}